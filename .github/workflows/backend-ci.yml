name: Continuous Integration backend

on:
  pull_request:
    branches:
      - main
    paths:
      - 'starter/backend/**'
  workflow_dispatch: 

jobs:
  
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache pipenv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-


      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.13

      - name: Install pipenv
        run: pip3 install pipenv

      - name: Install dependencies
        run: pipenv install
        working-directory: ./starter/backend

      - name: Run lint
        run: pipenv run lint
        working-directory: ./starter/backend

  test-backend:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.13

      - name: Install pipenv
        run: pip3 install pipenv
      
      - name: Install dependencies
        run: pipenv install
        working-directory: ./starter/backend

      - name: Run tests
        run: pipenv run test
        working-directory: ./starter/backend

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-backend, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.13

      - name: Install pipenv
        run: pip3 install pipenv
      
      - name: Install dependencies
        run: pipenv install
        working-directory: ./starter/backend

      # - name: Build application
      #   run: docker build --tag mp-backend:latest .
      #   working-directory: ./starter/backend

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest

        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

        working-directory: ./starter/backend

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-
      
    
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster

      - name: Set Docker image in Kustomize
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=338209332218.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Apply Kubernetes resources
        run: |
          cd starter/frontend/k8s
          kustomize build | kubectl apply -f -
